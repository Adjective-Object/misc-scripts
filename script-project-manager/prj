#!/usr/bin/env bash

##############################
# inherited from environment #
##############################

# projects root directory
if [ "" == "$PROJECT_BASE_DIR" ]; then
    PROJECT_BASE_DIR="$HOME/Projects"
fi

# environments root directory
if [ "" == "$ENVIRONMENT_BASE_DIR" ]; then
    ENVIRONMENT_BASE_DIR="$PROJECT_BASE_DIR/nix-starter-environments"
fi


####################
# argument parsing #
####################
SCRIPT=$0
PROJECT_NAME=''
VERB=''
CREATE_ENV=''

function usage () {
    echo "usage"
}

function set_verb () {
    if [ "" == "$VERB" ]; then
        VERB=$1
    else
        usage
        exit 1;
    fi
}

if [ $# -eq 0 ]; then
    usage;
    exit 1;
fi

while [ $# -gt 0 ]; do
    case $1 in
        -o|--open)
            set_verb "open"
            ;;
        -c|--create)
            set_verb "create"
            ;;
        -e|--env)
            # check that an arg was provided and error otherwise
            if [ $# -lt 2 ]; then
                usage
                exit 1
            fi
            # set the create_env to the next arg and shift again
            CREATE_ENV=$2
            shift 1
            ;;
        *)
            if [ -z "$PROJECT_NAME" ]; then
                PROJECT_NAME=$1
            else
                usage
                exit 1
            fi
            ;;
    esac
    shift 1
done

if [ -z "$PROJECT_NAME" ]; then
    usage
    exit 1
fi

if [ "" == "$VERB" ]; then
    VERB="open"
fi


###########
# helpers #
###########

# checks if the project folder exists
function project_exists () {
    return $([ -e $PROJECT_BASE_DIR/$1 ])
}

# checks if the project is a nix project
function project_is_nix () {
    return $([ -e $PROJECT_BASE_DIR/$1/shell.nix ])
}

function project_dir () {
    echo "$PROJECT_BASE_DIR/$1"
}

function get_shell () {
    cat /etc/passwd | grep $(whoami) | cut -d ':' -f 7
}

function list_environments () {
    if [ ! -d $ENVIRONMENT_BASE_DIR ]; then
        echo "cannot find environments in $ENVIRONMENT_BASE_DIR"
    else
        eval "ENVS=($(ls $ENVIRONMENT_BASE_DIR))"
        if [ "0" == "${#ENVS[@]}" ]; then
            echo "no environments in $ENVIRONMENT_BASE_DIR"
        else
            echo "available environments are:"
            echo ${ENVS[@]}
        fi
    fi
}


####################
# verb definitions #
####################

# create a new project
# verb_create [project-name]
function verb_create () {
    if project_exists $1; then
        echo "project $1 already exists"
        echo "did you mean '$SCRIPT $1'?"
        exit 1
    fi

    if [ "" != "$CREATE_ENV" ] &&
       [ ! -d $ENVIRONMENT_BASE_DIR/$CREATE_ENV/ ]; then
        echo "environment '$CREATE_ENV' does not exist"
        list_environments
        exit 1
    fi

    echo "creating project $1"
    mkdir -p $(project_dir $1)

    if [ "" != "$CREATE_ENV" ]; then
        for x in $(ls $ENVIRONMENT_BASE_DIR/$CREATE_ENV); do
            cp -r $ENVIRONMENT_BASE_DIR/$CREATE_ENV/$x $(project_dir $1)
        done
    fi
}

# open an existing project
# verb_open [project_name]
function verb_open () {
    project_exists $1
    if [ ! $? ]; then
        echo "project '$1' does not exist"
        echo "try $SCRIPT -c $1"
        exit 1
    fi

    cd $PROJECT_BASE_DIR/$1
    if project_is_nix $1; then
        echo "opening nix shell"
        SHELL=$(get_shell)
        nix-shell --run $SHELL
    fi
}

echo "$VERB project $PROJECT_NAME"
"verb_"$VERB $PROJECT_NAME


