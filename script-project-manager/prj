#!/usr/bin/env bash

#############
# constants #
#############

RESET="\e[0m"
BOLD="\e[1m"
CYAN="\e[36m"
MAGENTA="\e[35m"

##############################
# inherited from environment #
##############################

# projects root directory
if [ "" == "$PROJECT_BASE_DIR" ]; then
    PROJECT_BASE_DIR="$HOME/Projects"
fi

# environments root directory
if [ "" == "$ENVIRONMENT_BASE_DIR" ]; then
    ENVIRONMENT_BASE_DIR="$PROJECT_BASE_DIR/nix-starter-environments"
fi


####################
# argument parsing #
####################
SCRIPT=$0
PROJECT_NAME=''
VERB=''
CREATE_ENV=''
NEEDS_PROJECT=true

function usage () {
    echo "\
usage: $SCRIPT [command] [command-flags] [project-name]

  Manages a directory of projects under \$PROJECT_BASE_DIR, using
  environment definitions provided by \$ENVIRONMENT_BASE_DIR

  commands:
    -c/create           create a new project
    -o/open             open a project and, if it has a nix-shell, enter it
    -s/scan             check projects for unpushed commits or uncommitted work
    -p/list-projects    list all projects
    -l/list-env         list available environments in \$ENVIRONMENT_BASE_DIR

  flags:
    --env/-e            base environment to use when creating a new project

"
}

function set_verb () {
    if [ "" == "$VERB" ]; then
        VERB=$1
    else
        usage
        exit 1;
    fi

    NEEDS_PROJECT=$2
}

if [ $# -eq 0 ]; then
    usage;
    exit 1;
fi

while [ $# -gt 0 ]; do
    case $1 in
        -o|--open|open)
            set_verb "open" true
            ;;
        -c|--create|create)
            set_verb "create" true
            ;;
        -l|--list-env|list-env)
            set_verb "list-env" false
            ;;
        -l|--list-projects|list-projects)
            set_verb "list-projects" false
            ;;
        -s|--scan|scan)
            set_verb "scan" false
            ;;
        -e|--env)
            # check that an arg was provided and error otherwise
            if [ $# -lt 2 ]; then
                usage
                exit 1
            fi
            # set the create_env to the next arg and shift again
            CREATE_ENV=$2
            shift 1
            ;;
        *)
            if [ -z "$PROJECT_NAME" ]; then
                PROJECT_NAME=$1
            else
                usage
                exit 1
            fi
            ;;
    esac
    shift 1
done

if [ "$NEEDS_PROJECT" == "true" ] && [ -z "$PROJECT_NAME" ]; then
    usage
    exit 1
fi

if [ "" == "$VERB" ]; then
    VERB="open"
fi


###########
# helpers #
###########

# checks if the project folder exists
function project_exists () {
    [ -d "$PROJECT_BASE_DIR/$1" ]
    return "$?"
}

# checks if the project is a nix project
function project_is_nix () {
    return "$([ -e "$PROJECT_BASE_DIR/$1/shell.nix" ])"
}

function project_dir () {
    echo "$PROJECT_BASE_DIR/$1"
}

function get_shell () {
    grep "$(whoami)" /etc/passwd | cut -d ':' -f 7
}

function list_projects () {
    eval "FILES=($(ls "$PROJECT_BASE_DIR"))"
    declare -a ENVS
    for f in "${FILES[@]}"; do
        if [ -d "$PROJECT_BASE_DIR/$f" ]; then
            ENVS[${#ENVS[@]}]=$f
        fi
    done
    echo "${ENVS[@]}"
}

# check-git [project-name]
# checks if a git repo has out of date branches (branches with work on them
# not currently on the remote
function check_git () {
    cd "$PROJECT_BASE_DIR/$1" || (echo "can't enter $PROJECT_BASE_DIR/$1" >&2 && exit 1)

    if [ ! -d ".git" ]; then
        # echo "$1 not a git repository"
        return 1
    fi

    git diff --quiet
    if [ $? == 1 ]; then
        echo -e "$BOLD$CYAN$1$RESET: index is dirty"
        return 1
    fi

    git diff --quiet --cached
    if [ $? == 1 ]; then
        echo -e "$BOLD$CYAN$1$RESET: cache is dirty"
        return 1
    fi

    branch="\[([^[:space:]]+)(: [[:print:]]+)?\]"
    re="^([[:space:]]*\*[[:space:]]+)?([^[:space:]]+) +([[:alnum:]]+) +($branch)?"
    declare -A branches
    while read -r line; do
        if [[ $line =~ $re ]]; then
            LOCAL=${BASH_REMATCH[2]}
            REMOTE=${BASH_REMATCH[4]}
            if [[ $REMOTE =~ $branch ]]; then
                REMOTE=${BASH_REMATCH[1]}
                REMOTE_STATUS=${BASH_REMATCH[2]}
                if [[ ": gone" == "$REMOTE_STATUS" ]]; then continue; fi
                branches[$LOCAL]=$REMOTE
            else
                branches[$LOCAL]="__NULL"
            fi
        fi
    done < <(git branch -vv)

    HEADER=false
    for LOCAL in "${!branches[@]}"
    do
        FOLLOW=""
        REMOTE=${branches[$LOCAL]}
        if [ "$REMOTE" == "__NULL" ]; then
            FOLLOW=": $MAGENTA$LOCAL$RESET does not track a remote"
        elif git diff --quiet "$LOCAL" "$REMOTE"; then
            FOLLOW=": $MAGENTA$LOCAL$RESET and $MAGENTA$REMOTE$RESET out of sync"
        else
            continue
        fi


        if ! $HEADER; then
            echo -e -n "$BOLD$CYAN$1$RESET"
            HEADER=true
        else
            echo -e -n "$BOLD$CYAN$RESET"
        fi

        echo -e "$FOLLOW"
    done
}

function list_environments () {
    if [ ! -d "$ENVIRONMENT_BASE_DIR" ]; then
        echo "cannot find environments in $ENVIRONMENT_BASE_DIR"
    else
        eval "FILES=($(ls "$ENVIRONMENT_BASE_DIR"))"
        declare -a ENVS
        for f in "${FILES[@]}"; do
            if [ -d "$ENVIRONMENT_BASE_DIR/$f" ]; then
                ENVS[${#ENVS[@]}]=$f
            fi
        done

        if [ "0" == "${#ENVS[@]}" ]; then
            echo "no environments in $ENVIRONMENT_BASE_DIR"
        else
            echo "available environments are:"
            for env in "${ENVS[@]}"; do
                echo -n " - $env"
                SHELL_FILE=$ENVIRONMENT_BASE_DIR/$env/shell.nix
                if [ -f "$SHELL_FILE" ]; then
                    PKG=$(nix-env -qa -f "$SHELL_FILE")
                    echo -n " ($PKG)"
                fi
                echo
            done
        fi
    fi
}


####################
# verb definitions #
####################

# create a new project
# verb_create [project-name]
function verb_create () {
    if project_exists "$1"; then
        echo "project $1 already exists"
        echo "did you mean '$SCRIPT $1'?"
        exit 1
    fi

    if [ "" != "$CREATE_ENV" ] &&
       [ ! -d "$ENVIRONMENT_BASE_DIR/$CREATE_ENV/" ]; then
        echo "environment '$CREATE_ENV' does not exist"
        list_environments
        exit 1
    fi

    echo "creating project $1"
    mkdir -p "$(project_dir "$1")"

    if [ "" != "$CREATE_ENV" ]; then
        for x in $ENVIRONMENT_BASE_DIR/$CREATE_ENV/*; do
            cp -r "$ENVIRONMENT_BASE_DIR/$CREATE_ENV/$x $(project_dir "$1")"
        done
    fi
}

# open an existing project
# verb_open [project_name]
function verb_open () {
    if project_exists "$1"; then
        echo "project '$1' does not exist"
        echo "try $SCRIPT -c $1"
        exit 1
    fi

    PROJDIR="$PROJECT_BASE_DIR/$1"
    cd "$PROJDIR" || (echo "cannot open $PROJDIR" && exit 1)
    if project_is_nix "$1"; then
        echo "opening nix shell"
        SHELL=$(get_shell)
        nix-shell --run "$SHELL"
    fi
}

# list environments
function verb_list-env () {
    list_environments
}

# scan all projects for existing things
function verb_scan () {
    PROJECTS=$(list_projects)
    PROJECT_LISTINGS=''
    for project in $PROJECTS; do
        echo -e -n "\r\033[Kscanning $MAGENTA$project$RESET"
        OUT=$(check_git "$project")
        if [ -z "$OUT" ]; then
            continue
        fi
        PROJECT_LISTINGS="$PROJECT_LISTINGS"$'\n'"$OUT"
    done

    echo -e -n "\r"
    echo "$PROJECT_LISTINGS" | column -tn -s ":"
}

function verb_list-projects () {
    list_projects | tr ' ' '\n'
}

"verb_"$VERB "$PROJECT_NAME"

